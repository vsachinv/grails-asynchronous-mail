plugins {
    id 'eclipse'
    id 'idea'
    id 'org.grails.grails-plugin'
    id 'com.bertramlabs.asset-pipeline'
    id 'org.grails.grails-gsp'
    id 'maven-publish'
    id 'signing'
    id "com.gorylenko.gradle-git-properties"
}

group = 'io.github.gpc'

repositories {
    mavenCentral()
    maven { url 'https://repo.grails.org/grails/core' }
}

configurations {
    configureEach {
        resolutionStrategy.force 'org.codehaus.groovy:groovy-xml:3.0.13'
    }
}

dependencies {

    compileOnly 'io.micronaut:micronaut-inject-groovy'

    implementation 'org.grails:grails-logging'
    implementation 'org.grails:grails-plugin-rest'
    implementation 'org.grails:grails-plugin-databinding'
    implementation 'org.grails:grails-plugin-i18n'
    implementation 'org.grails:grails-plugin-services'
    implementation 'org.grails.plugins:async'
    implementation 'org.grails.plugins:scaffolding'
    implementation 'org.grails.plugins:hibernate5'
    implementation 'org.hibernate:hibernate-core:5.6.15.Final'
    implementation 'org.grails.plugins:gsp'
    implementation 'org.grails.plugins:mail:4.0.0'
    // This is needed for the quartz-plugin on grails >= 4.0.x, https://github.com/grails-plugins/grails-quartz/issues/107#issuecomment-575951471
    implementation('org.quartz-scheduler:quartz:2.3.2') { exclude group: 'slf4j-api', module: 'c3p0' }
    implementation 'org.grails.plugins:quartz:2.0.13'

    testRuntimeOnly 'com.h2database:h2'
    testRuntimeOnly 'org.apache.tomcat:tomcat-jdbc'

    testImplementation 'org.springframework.boot:spring-boot-starter-tomcat'
    //testImplementation "ch.qos.logback:logback-classic:1.2.12"
    //testImplementation "ch.qos.logback:logback-core:1.2.12"
    testImplementation 'io.micronaut:micronaut-inject-groovy'
    testImplementation 'org.grails:grails-gorm-testing-support'
    testImplementation 'org.grails:grails-web-testing-support'
}


java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

// enable if you wish to package this plugin as a standalone application
bootJar.enabled = false

assets {
    packagePlugin = true
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task packageJavadoc(type: Jar) {
    from javadoc
    classifier = 'javadoc'
}

task packageGroovydoc(type: Jar) {
    from groovydoc
    classifier = 'groovydoc'
}


gitProperties {
    keys = ['git.branch', 'git.commit.id', 'git.commit.time', 'git.commit.id.abbrev']
    failOnNoGitDirectory = true
    extProperty = 'gitProps' // git properties will be put in a map at project.ext.gitProps
}

javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compileClasspath
    options
            {
                setMemberLevel JavadocMemberLevel.PUBLIC
                setAuthor true

                links "https://docs.oracle.com/javase/8/docs/api/"
            }
}


generateGitProperties.outputs.upToDateWhen { false } // make sure the generateGitProperties task always executes (even when git.properties is not changed)

jar {
    enabled = true
    archiveClassifier = ''
    dependsOn generateGitProperties
    manifest {
        attributes("Built-By": System.getProperty("user.name"))
        attributes(["Plugin-Version"        : version,
                    "Plugin-Title"          : project.name,
                    "Plugin-Build-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    "Git-Commit"            : "${-> project.ext.gitProps['git.commit.id.abbrev']}",
                    "Git-Branch"            : "${-> project.ext.gitProps['git.branch']}"])
    }
    from sourceSets.main.output
    exclude 'git.properties'
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = 'asynchronous-mail'
            version = project.version

            from components.java
            artifact sourceJar
            artifact packageJavadoc
            artifact packageGroovydoc

            pom {
                name = 'Grails Asynchronous Mail Plugin'
                description = 'The plugin realises asynchronous mail sending. It stores messages in a DB and sends them asynchronously by a quartz job.'
                url = 'https://github.com/gpc/grails-asynchronous-mail'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'kefirfromperm'
                        name = 'Vitalii Samolovskikh'
                    }
                    developer {
                        id = 'stokito'
                        name = 'Sergey Ponomarev'
                    }
                    developer {
                        id = 'ilopmar'
                        name = 'Iván López'
                    }
                    developer {
                        id = 'burtbeckwith'
                        name = 'Burt Beckwith'
                    }
                    developer {
                        id = 'puneetbehl'
                        name = 'Puneet Behl'
                    }
                    developer {
                        id = 'aberbenni'
                        name = 'Alessandro Berbenni'
                    }
                    developer {
                        id = 'dpcasady'
                        name = 'Danny Casady'
                    }
                    developer {
                        id = 'SAgrawal14'
                        name = 'Shashank Agrawal'
                    }
                    developer {
                        id = 'visheshd'
                        name = 'Vishesh'
                    }
                    developer {
                        id = 'micke-a'
                        name = 'Mikael Andersson'
                    }
                    developer {
                        id = 'pgdoval'
                        name = 'Pablo González Doval'
                    }
                    developer {
                        id = 'Uniqen'
                        name = 'Magnus Dalin'
                    }
                    developer {
                        id = 'demon101'
                        name = 'Demon'
                    }
                    developer {
                        id = 'matrei'
                        name = 'Mattias Reichel'
                    }
                    developer {
                        id = 'vsachinv'
                        name = 'Sachin Verma'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/gpc/grails-asynchronous-mail.git'
                    developerConnection = 'scm:git:ssh://github.com:gpc/grails-asynchronous-mail.git'
                    url = 'https://github.com/gpc/grails-asynchronous-mail'
                }
            }
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/gpc/grails-asynchronous-mail1"
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }

        maven {
            name = "NexusRepo"
            credentials {
                username project.findProperty("nexusUsername") ?: System.getenv("NEXUS_USERNAME")
                password project.findProperty("nexusPassword") ?: System.getenv("NEXUS_PASSWORD")
            }
            url project.findProperty("nexusUrl") ?: System.getenv("NEXUS_URL")
            allowInsecureProtocol = true
        }
    }
}

ext."signing.keyId" = project.findProperty('signing.keyId') ?: System.getenv('SIGNING_KEY_ID')
ext."signing.password" = project.findProperty('signing.password') ?: System.getenv('SIGNING_PASSPHRASE')
ext."signing.secretKeyRingFile" = project.findProperty('signing.secretKeyRingFile') ?: (System.getenv('SIGNING_PASSPHRASE') ?: "${System.getProperty('user.home')}/.gnupg/secring.gpg")

ext.isReleaseVersion = !version.toString().endsWith("SNAPSHOT")

afterEvaluate {
    signing {
        required { isReleaseVersion }
        sign publishing.publications.maven
    }
}

tasks.withType(Sign).configureEach {
    onlyIf { isReleaseVersion }
}

if(project.hasProperty('release')) {
    apply plugin: 'io.github.gradle-nexus.publish-plugin'
    nexusPublishing {
        repositories {
            sonatype {
                def ossUser = System.getenv("SONATYPE_USERNAME") ?: project.findProperty('sonatypeOss2Username') ?: ''
                def ossPass = System.getenv("SONATYPE_PASSWORD") ?: project.findProperty("sonatypeOss2Password") ?: ''
                def ossStagingProfileId = System.getenv("SONATYPE_STAGING_PROFILE_ID") ?: project.findProperty("sonatypeOssStagingProfileIdJms") ?: ''

                nexusUrl = uri("https://s01.oss.sonatype.org/service/local/")
                snapshotRepositoryUrl = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
                username = ossUser
                password = ossPass
                stagingProfileId = ossStagingProfileId
            }
        }
    }
}

tasks.register('snapshotVersion') {
    doLast {
        if (!project.version.toString().endsWith('-SNAPSHOT')) {
            ant.propertyfile(file: "gradle.properties") {
                entry(key: "version", value: "${project.version}-SNAPSHOT")
            }
        }
    }
}
